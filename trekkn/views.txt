class GoogleAuthView(APIView):
    def post(self, request):
        try:
            token = request.data.get("id_token")
            device_id = request.data.get("device_id")
            invite_code = request.data.get("invite_code")

            if not token:
                return Response(
                    {"error": "ID token not provided"},
                    status=status.HTTP_400_BAD_REQUEST,
                )
            if not device_id:
                return Response(
                    {"error": "Device ID not provided"},
                    status=status.HTTP_400_BAD_REQUEST,
                )

            # Verify token with Google
            idinfo = id_token.verify_oauth2_token(
                token,
                requests.Request(),
                settings.GOOGLE_CLIENT_ID,
            )

            email = idinfo["email"]
            name = idinfo.get("name", "")

            # ðŸš¨ Check if device_id is already bound to another user
            existing_user_with_device = TrekknUser.objects.filter(device_id=device_id).first()
            if existing_user_with_device and existing_user_with_device.email != email:
                return Response(
                    {"error": "This device is already linked to another account."},
                    status=status.HTTP_403_FORBIDDEN,
                )

            # Check if user already exists
            try:
                user = TrekknUser.objects.get(email=email)

                # Bind device if first login
                if user.device_id is None:
                    user.device_id = device_id
                    user.save()

                elif user.device_id != device_id:
                    return Response(
                        {"error": "This account is already bound to another device."},
                        status=status.HTTP_403_FORBIDDEN,
                    )

            except TrekknUser.DoesNotExist:
                # New user â†’ create only if device is not already taken
                user = TrekknUser.objects.create_user(
                    email=email,
                    name=name if name else "",
                    device_id=device_id,
                )

            # Issue JWT tokens
            refresh = RefreshToken.for_user(user)
            return Response(
                {
                    "refresh": str(refresh),
                    "access": str(refresh.access_token),
                }
            )

        except Exception as e:
            print(e)
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
